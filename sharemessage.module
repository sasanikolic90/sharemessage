<?php

/**
 * @file
 * New Sharing Module.
 */

use Drupal\sharemessage\Entity\ShareMessage;

/**
 * Implements hook_permission().
 */
function sharemessage_permission() {
  return array(
    'view sharemessages' => array(
      'title' => t('View ShareMessage entities.'),
    ),
    'administer sharemessages' => array(
      'title' => t('Administer ShareMessage entities.'),
    ),
  );
}

/**
 * Load a ShareMessage.
 *
 * @return \Drupal\sharemessage\Entity\ShareMessage
 *   The loaded ShareMessage object or FALSE.
 */
function sharemessage_load($smid, $reset = FALSE) {
  $sharemessage = sharemessage_load_multiple(array($smid), $reset);
  return $sharemessage ? reset($sharemessage) : FALSE;
}

/**
 * Load multiple share messages based on certain conditions.
 *
 * @return array
 *   An array of sharemessage objects indexed by their ids.
 */
function sharemessage_load_multiple($smids = array(), $reset = FALSE) {
  return entity_load_multiple('sharemessage', $smids, $reset);
}

/**
 * Delete multiple share messages.
 */
function sharemessage_delete_multiple($smids) {
  entity_delete_multiple('sharemessage', $smids);
}

/**
 * Checks whether a machine name already exists.
 *
 * @return bool
 *   TRUE if sharemessage with given name exists, FALSE otherwise.
 */
function sharemessage_check_machine_name_if_exist($value) {
  return \Drupal::entityManager()->getStorage('sharemessage')->load($value);
}

/**
 * Entity view callback.
 *
 * @return array
 *   A render array for the sharemessage.
 */
function sharemessage_view(ShareMessage $sharemessage) {
  return entity_view($sharemessage, 'full', NULL, TRUE);
}

/**
 * Load AddThis services.
 */
function sharemessage_get_addthis_services() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    if ($cache = \Drupal::cache()->get('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->id)) {
      $options = $cache->data;
    }
    else {
      $json = sharemessage_get_services_json();
      $output = json_decode($json);
      if (!empty($output)) {
        $options = array(t('Common') => array(), t('Mail') => array(), t('Other') => array());
        foreach ($output->data as $service) {
          if (in_array($service->code, array('facebook', 'facebook_like', 'twitter', 'xing', 'linkedin', 'wordpress', 'google_plusone_share'))) {
            $options[t('Common')][$service->code] = $service->name;
          }
          elseif (in_array($service->code, array('mail', 'gmail', 'yahoomail', 'aolmail', 'email', 'mailto'))) {
            $options[t('Mail')][$service->code] = $service->name;
          }
          else {
            $options[t('Other')][$service->code] = $service->name;
          }
        }
        // Tweet is not defined?
        $options[t('Common')]['tweet'] = t('Tweet');
        // Neither is Pinterest Follow.
        $options[t('Common')]['pinterest_follow'] = t('Pinterest follow');
        \Drupal::cache()->set('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->id, $options);
      }
      else {
        \Drupal::cache()->delete('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->id);
      }
    }
  }

  return $options;
}

/**
 * Implements hook_init().
 */
function sharemessage_init() {
  $smid = \Drupal::request()->get('smid');
  if (!empty($smid) && \Drupal::config('sharemessage.settings')->get('message_enforcement')) {
    $sharemessage = sharemessage_load($smid);
    if ($sharemessage) {
      entity_view($sharemessage, 'only_og_tags');
    }
  }
}

/**
 * Getter for the services definitions.
 *
 * If option is set the local file within the module folder will be read instead
 * of the file that is hosted on the addthis cdn.
 *
 * @return string
 *   The path to the services definition file.
 */
function sharemessage_get_services_json() {
  if (\Drupal::config('sharemessage.settings')->get('local_services_definition')) {
    $file_uri = drupal_get_path('module', 'sharemessage') . '/addthis/sharing.en.json';
  }
  else {
    $file_uri = 'http://cache.addthiscdn.com/services/v1/sharing.en.json';
  }
  return file_get_contents($file_uri);
}
