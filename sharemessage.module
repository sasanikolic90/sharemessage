<?php

/**
 * @file
 * New Sharing Module.
 */
use Drupal\sharemessage\Entity\ShareMessage;

/**
 * Checks whether a machine name already exists.
 *
 * @return bool
 *   TRUE if sharemessage with given name exists, FALSE otherwise.
 */
function sharemessage_check_machine_name_if_exist($value) {
  return \Drupal::entityManager()->getStorage('sharemessage')->load($value);
}


/**
 * Implements hook_library_info_alter().
 */
function sharemessage_library_info_alter(&$libraries, $extension) {
  if ($extension != 'sharemessage') {
    return;
  }
  // Add the profile id to the URL if present.
  $profile_id = \Drupal::config('sharemessage.settings')->get('addthis_profile_id');
  if ($profile_id) {
    $libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js##pubid=' . $profile_id] = $libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js'];
    unset($libraries['addthis']['js']['//s7.addthis.com/js/300/addthis_widget.js']);
  }
}

/**
 * Implements hook_page_attachments().
 */
function sharemessage_page_attachments(&$page) {
  $smid = \Drupal::request()->query->get('smid');
  $page['#cache']['contexts'][] = 'url.query_args:smid';
  $config = \Drupal::config('sharemessage.settings');
  \Drupal::service('renderer')->addCacheableDependency($page, $config);
  if (!empty($smid) && $config->get('message_enforcement')) {
    $sharemessage = ShareMessage::load($smid);
    if ($sharemessage) {
      \Drupal::service('renderer')->addCacheableDependency($page, $sharemessage);
      foreach ($sharemessage->buildOGTags($sharemessage->getContext()) as $tag) {
        $page['#attached']['html_head'][] = [
          $tag,
          str_replace(':', '_', $tag['#attributes']['property']),
        ];
      }
    }
  }
}
/**
 * Load AddThis services.
 */
function sharemessage_get_addthis_services() {
  $options = &drupal_static(__FUNCTION__);

  if (!isset($options)) {
    if ($cache = \Drupal::cache()->get('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId())) {
      $options = $cache->data;
    }
    else {
      $json = sharemessage_get_services_json();
      $output = json_decode($json);
      if (!empty($output)) {
        $options = array(t('Common') => array(), t('Mail') => array(), t('Other') => array());
        foreach ($output->data as $service) {
          if (in_array($service->code, array('facebook', 'facebook_like', 'twitter', 'xing', 'linkedin', 'wordpress', 'google_plusone_share'))) {
            $options[t('Common')][$service->code] = $service->name;
          }
          elseif (in_array($service->code, array('mail', 'gmail', 'yahoomail', 'aolmail', 'email', 'mailto'))) {
            $options[t('Mail')][$service->code] = $service->name;
          }
          else {
            $options[t('Other')][$service->code] = $service->name;
          }
        }
        // Tweet is not defined?
        $options[t('Common')]['tweet'] = t('Tweet');
        // Neither is Pinterest Follow.
        $options[t('Common')]['pinterest_follow'] = t('Pinterest follow');
        \Drupal::cache()->set('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId(), $options);
      }
      else {
        \Drupal::cache()->delete('sharemessage_addthis_services:' . \Drupal::languageManager()->getCurrentLanguage()->getId());
      }
    }
  }

  return $options;
}

/**
 * Getter for the services definitions.
 *
 * If option is set the local file within the module folder will be read instead
 * of the file that is hosted on the addthis cdn.
 *
 * @return string
 *   The path to the services definition file.
 */
function sharemessage_get_services_json() {
  if (\Drupal::config('sharemessage.settings')->get('local_services_definition')) {
    $file_uri = drupal_get_path('module', 'sharemessage') . '/addthis/sharing.en.json';
  }
  else {
    $file_uri = 'http://cache.addthiscdn.com/services/v1/sharing.en.json';
  }
  return file_get_contents($file_uri);
}
